/**
 * Skills Matrix - Gestion du partage et collaboration
 */

// Configuration API
const API_BASE_URL = '/api/routes-skills-matrix';

// ID de session actuelle
let currentSessionId = null;

// Intervalle de synchronisation (10 secondes)
let syncInterval = null;
const SYNC_INTERVAL_MS = 10000;

/**
 * Initialiser le partage
 */
function initShare() {
    // V√©rifier si on est dans une session partag√©e
    const urlParams = new URLSearchParams(window.location.search);
    const matrixId = urlParams.get('matrix');
    const sessionId = urlParams.get('session'); // Ancien syst√®me (fallback)

    if (matrixId) {
        // Nouveau syst√®me : charger la matrice PocketBase
        currentSessionId = matrixId;
        window.currentMatrixId = matrixId;

        // PocketBase est d√©j√† initialis√© par main.js, juste d√©marrer la sync
        if (typeof usePocketBase !== 'undefined' && usePocketBase) {
            startAutoSync();
            updateShareUI(true);
            console.log('üíæ Sauvegarde automatique activ√©e (pas de sync p√©riodique)');
        } else {
            updateShareUI(false);
        }
    } else if (sessionId) {
        // Ancien syst√®me (fallback)
        currentSessionId = sessionId;
        loadSharedSession(sessionId);
        startAutoSync();
        updateShareUI(true);
    } else {
        // Pas de partage
        updateShareUI(false);
    }
}

/**
 * Cr√©er une nouvelle session partag√©e
 */
async function createSharedSession() {
    try {
        showNotification('üîÑ Cr√©ation du lien de partage...');

        // Si PocketBase est activ√©, utiliser l'ID de la matrice
        if (window.currentMatrixId) {
            currentSessionId = window.currentMatrixId;

            // Mettre √† jour l'URL sans recharger
            const newUrl = `${window.location.pathname}?matrix=${window.currentMatrixId}`;
            window.history.pushState({}, '', newUrl);

            // Copier le lien dans le presse-papier
            const fullUrl = `${window.location.origin}${window.location.pathname}?matrix=${window.currentMatrixId}`;
            await navigator.clipboard.writeText(fullUrl);

            // D√©marrer la synchronisation
            startAutoSync();
            updateShareUI(true);

            showNotification('‚úÖ Lien copi√© ! Partagez-le avec votre √©quipe');
            showShareModal(fullUrl, null); // Pas d'expiration avec PocketBase

        } else {
            // Fallback : syst√®me de partage local (sans backend)
            showNotification('‚ö†Ô∏è Activez PocketBase pour partager la matrice', 'warning');
        }

    } catch (error) {
        console.error('Erreur cr√©ation session:', error);
        showNotification('‚ùå Erreur lors de la cr√©ation du lien');
    }
}

/**
 * Charger une session partag√©e
 */
async function loadSharedSession(sessionId) {
    try {
        showNotification('üîÑ Chargement de la session partag√©e...');

        const response = await fetch(`${API_BASE_URL}/session/${sessionId}`);

        if (!response.ok) {
            if (response.status === 404) {
                throw new Error('Session introuvable');
            } else if (response.status === 410) {
                throw new Error('Session expir√©e (> 48h)');
            }
            throw new Error('Erreur lors du chargement');
        }

        const result = await response.json();

        // Charger les donn√©es
        matrixData = result.data;

        // Mettre √† jour l'interface
        renderMatrix();
        renderRadar();
        renderAdvice();

        showNotification('‚úÖ Session partag√©e charg√©e');

    } catch (error) {
        console.error('Erreur chargement session:', error);
        showNotification(`‚ùå ${error.message}`);

        // Retirer le param√®tre session de l'URL
        window.history.pushState({}, '', window.location.pathname);
        currentSessionId = null;
        updateShareUI(false);
    }
}

/**
 * Sauvegarder les modifications dans la session partag√©e
 */
async function saveSharedSession() {
    if (!currentSessionId) return;

    try {
        // Avec PocketBase, la sauvegarde est g√©r√©e par syncWithPocketBase()
        // Cette fonction n'est plus n√©cessaire car les donn√©es sont sauvegard√©es
        // automatiquement via pocketbase-integration.js
        console.log('üíæ Sauvegarde g√©r√©e par PocketBase');
    } catch (error) {
        console.error('Erreur sauvegarde session:', error);
    }
}

/**
 * Synchroniser manuellement (d√©sactiv√©e - sauvegarde automatique)
 */
async function syncSession() {
    // Synchronisation automatique d√©sactiv√©e
    // La sauvegarde se fait via saveData() qui appelle syncWithPocketBase()
    return;
}

/**
 * D√©marrer la synchronisation automatique (d√©sactiv√©e - sauvegarde automatique √† chaque modification)
 */
function startAutoSync() {
    // Synchronisation automatique d√©sactiv√©e
    // La sauvegarde se fait automatiquement √† chaque modification via saveData()
    console.log('üíæ Sauvegarde automatique activ√©e (pas de sync p√©riodique)');
}

/**
 * Arr√™ter la synchronisation automatique (d√©sactiv√©e)
 */
function stopAutoSync() {
    // Rien √† faire, la sync automatique est d√©sactiv√©e
    console.log('üíæ Mode sauvegarde automatique');
}

/**
 * Quitter la session partag√©e
 */
function leaveSharedSession() {
    stopAutoSync();
    currentSessionId = null;

    // Retirer le param√®tre session de l'URL
    window.history.pushState({}, '', window.location.pathname);

    updateShareUI(false);
    showNotification('üëã Session partag√©e quitt√©e');
}

/**
 * Mettre √† jour l'interface de partage
 */
function updateShareUI(isShared) {
    const shareBtn = document.getElementById('shareBtn');

    if (!shareBtn) return;

    if (isShared) {
        shareBtn.classList.add('btn-shared');
        shareBtn.title = 'Matrice partag√©e - Sauvegarde automatique active';
    } else {
        shareBtn.classList.remove('btn-shared');
        shareBtn.title = 'Cliquer pour cr√©er un lien de partage';
    }
}

/**
 * Afficher la modal de partage
 */
function showShareModal(shareUrl, expiresAt) {
    const modal = document.createElement('div');
    modal.className = 'share-modal-overlay';

    let expiryInfo = '';
    if (expiresAt) {
        const expiryDate = new Date(expiresAt);
        const expiryStr = expiryDate.toLocaleString('fr-FR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
        expiryInfo = `<p><strong>‚è∞ Expire le :</strong> ${expiryStr}</p>`;
    } else {
        expiryInfo = `<p><strong>‚ôæÔ∏è Lien permanent</strong> (stock√© dans PocketBase)</p>`;
    }

    modal.innerHTML = `
        <div class="share-modal-content">
            <div class="share-modal-header">
                <h3>üîó Lien de partage cr√©√©</h3>
                <button class="modal-close" onclick="closeShareModal()">√ó</button>
            </div>
            <div class="share-modal-body">
                <p>Partagez ce lien avec votre √©quipe pour collaborer en temps r√©el :</p>
                <div class="share-url-container">
                    <input type="text" class="share-url-input" value="${shareUrl}" readonly>
                    <button class="btn btn-success" onclick="copyShareUrl('${shareUrl}')">
                        <span class="btn-icon">üìã</span> Copier
                    </button>
                </div>
                <div class="share-info">
                    ${expiryInfo}
                    <p><strong>üîÑ Synchronisation :</strong> Automatique via PocketBase</p>
                    <p><strong>üíæ Conservation :</strong> 48 heures</p>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    setTimeout(() => modal.classList.add('active'), 10);
}

/**
 * Fermer la modal de partage
 */
function closeShareModal() {
    const modal = document.querySelector('.share-modal-overlay');
    if (modal) {
        modal.classList.remove('active');
        setTimeout(() => document.body.removeChild(modal), 300);
    }
}

/**
 * Copier l'URL de partage
 */
async function copyShareUrl(url) {
    try {
        await navigator.clipboard.writeText(url);
        showNotification('‚úÖ Lien copi√© dans le presse-papier');
    } catch (error) {
        console.error('Erreur copie:', error);
        showNotification('‚ùå Erreur lors de la copie');
    }
}

/**
 * G√©rer le clic sur le bouton de partage
 */
function handleShareClick() {
    if (currentSessionId) {
        // Si d√©j√† en session, recr√©er le lien (copier √† nouveau)
        const fullUrl = `${window.location.origin}${window.location.pathname}?matrix=${currentSessionId}`;
        navigator.clipboard.writeText(fullUrl).then(() => {
            showNotification('‚úÖ Lien copi√© ! Partagez-le avec votre √©quipe');
            showShareModal(fullUrl, null);
        }).catch(() => {
            showNotification('‚ùå Erreur lors de la copie');
        });
    } else {
        // Cr√©er une nouvelle session
        createSharedSession();
    }
}

// Sauvegarder automatiquement lors des modifications
// Note: Avec PocketBase, la sauvegarde est g√©r√©e par pocketbase-integration.js
// via syncWithPocketBase() qui est appel√© automatiquement
const originalSaveData = window.saveData;
window.saveData = function () {
    originalSaveData();
    // saveSharedSession() n'est plus n√©cessaire avec PocketBase
};

console.log('‚úÖ share.js charg√©');
