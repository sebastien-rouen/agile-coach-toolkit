class ExampleMappingTool {
    constructor() {
        this.cards = [];
        this.cardIdCounter = 1;
        this.votes = new Map();
        this.currentStoryPoints = null;
        this.storyColumns = [];
        
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.loadFromStorage();
        this.setupDragAndDrop();
        this.initializeColumns();
    }
    
    initializeColumns() {
        // Cr√©er une colonne par d√©faut
        this.createStoryColumn();
    }
    
    createStoryColumn() {
        const boardColumns = document.getElementById('main-board');
        const columnId = `column-${Date.now()}`;
        
        const column = document.createElement('div');
        column.className = 'story-column';
        column.id = columnId;
        column.innerHTML = `
            <h4>Nouvelle colonne</h4>
            <div class="story-section" data-type="story">
                <!-- Stories ici -->
            </div>
            <div class="rules-section" data-type="rule">
                <div class="section-title">R√®gles m√©tier</div>
            </div>
            <div class="examples-section" data-type="example">
                <div class="section-title">Exemples concrets</div>
            </div>
        `;
        
        boardColumns.appendChild(column);
        this.storyColumns.push(columnId);
        
        this.setupColumnDragAndDrop(column);
        
        return column;
    }
    
    setupColumnDragAndDrop(column) {
        column.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            column.classList.add('drag-over');
        });
        
        column.addEventListener('dragleave', (e) => {
            if (!column.contains(e.relatedTarget)) {
                column.classList.remove('drag-over');
            }
        });
        
        column.addEventListener('drop', (e) => {
            e.preventDefault();
            column.classList.remove('drag-over');
            
            const cardId = e.dataTransfer.getData('text/plain');
            const card = document.getElementById(cardId);
            
            if (card) {
                const cardType = card.classList.contains('story') ? 'story' :
                               card.classList.contains('rule') ? 'rule' :
                               card.classList.contains('example') ? 'example' : 'question';
                
                if (cardType === 'question') {
                    // Les questions vont dans la sidebar
                    const questionsContainer = document.getElementById('questions-container');
                    questionsContainer.appendChild(card);
                } else {
                    // Autres cartes dans les sections appropri√©es
                    const targetSection = column.querySelector(`[data-type="${cardType}"]`);
                    if (targetSection) {
                        targetSection.appendChild(card);
                        if (cardType === 'story') {
                            column.classList.add('has-story');
                            column.querySelector('h4').textContent = this.getCardContent(cardId) || 'User Story';
                        }
                    }
                }
                
                this.reorganizeBoard();
                this.saveToStorage();
            }
        });
    }
    
    bindEvents() {
        // Votes Fibonacci
        document.querySelectorAll('.vote-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.vote(e.target.dataset.value);
            });
        });
        
        // Sauvegarde automatique
        setInterval(() => {
            this.saveToStorage();
        }, 5000);
        
        // Sauvegarde avant fermeture
        window.addEventListener('beforeunload', () => {
            this.saveToStorage();
        });
        
        // Raccourcis clavier
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case 's':
                        e.preventDefault();
                        this.exportJSON();
                        break;
                    case 'z':
                        e.preventDefault();
                        // TODO: Impl√©menter undo
                        break;
                }
            }
        });
    }
    
    setupDragAndDrop() {
        // Setup pour la sidebar des questions
        const questionsContainer = document.getElementById('questions-container');
        
        questionsContainer.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
        });
        
        questionsContainer.addEventListener('drop', (e) => {
            e.preventDefault();
            const cardId = e.dataTransfer.getData('text/plain');
            const card = document.getElementById(cardId);
            
            if (card && card.classList.contains('question')) {
                questionsContainer.appendChild(card);
                this.saveToStorage();
            }
        });
    }
    
    addCard(type, content = '', id = null) {
        const cardId = id || `card-${this.cardIdCounter++}`;
        const card = this.createCardElement(cardId, type, content);
        
        // Placement intelligent selon le type
        if (type === 'question') {
            document.getElementById('questions-container').appendChild(card);
        } else if (type === 'story') {
            // Cr√©er une nouvelle colonne pour la story
            const column = this.createStoryColumn();
            const storySection = column.querySelector('[data-type="story"]');
            storySection.appendChild(card);
            column.classList.add('has-story');
            column.querySelector('h4').textContent = content || 'Nouvelle User Story';
        } else {
            // Placer dans la premi√®re colonne disponible ou cr√©er une nouvelle
            const existingColumns = document.querySelectorAll('.story-column');
            const lastColumn = existingColumns[existingColumns.length - 1];
            
            if (lastColumn) {
                const targetSection = lastColumn.querySelector(`[data-type="${type}"]`);
                targetSection.appendChild(card);
            } else {
                const newColumn = this.createStoryColumn();
                const targetSection = newColumn.querySelector(`[data-type="${type}"]`);
                targetSection.appendChild(card);
            }
        }
        
        this.cards.push({
            id: cardId,
            type: type,
            content: content,
            timestamp: Date.now()
        });
        
        this.saveToStorage();
        
        // Focus sur le nouveau contenu
        setTimeout(() => {
            const input = card.querySelector('.card-input');
            if (input) {
                input.focus();
            }
        }, 100);
        
        return card;
    }
    
    createCardElement(id, type, content) {
        const card = document.createElement('div');
        card.className = `card ${type}`;
        card.id = id;
        card.draggable = true;
        
        const typeLabels = {
            story: 'User Story',
            rule: 'R√®gle',
            example: 'Exemple',
            question: 'Question'
        };
        
        card.innerHTML = `
            <div class="card-header">
                <span class="card-type">${typeLabels[type]}</span>
                <div class="card-actions">
                    <button class="card-btn" onclick="exampleTool.duplicateCard('${id}')" title="Dupliquer">üìã</button>
                    <button class="card-btn" onclick="exampleTool.deleteCard('${id}')" title="Supprimer">üóëÔ∏è</button>
                </div>
            </div>
            <div class="card-content">
                <textarea class="card-input" placeholder="${this.getPlaceholder(type)}">${content}</textarea>
            </div>
        `;
        
        // √âv√©nements drag & drop
        card.addEventListener('dragstart', (e) => {
            e.dataTransfer.setData('text/plain', id);
            card.classList.add('dragging');
        });
        
        card.addEventListener('dragend', () => {
            card.classList.remove('dragging');
        });
        
        // Sauvegarde automatique du contenu
        const input = card.querySelector('.card-input');
        input.addEventListener('input', (e) => {
            this.updateCardContent(id, e.target.value);
            
            // Mettre √† jour le titre de la colonne si c'est une story
            if (type === 'story') {
                const column = card.closest('.story-column');
                if (column) {
                    const title = column.querySelector('h4');
                    title.textContent = e.target.value.substring(0, 50) + (e.target.value.length > 50 ? '...' : '') || 'User Story';
                }
            }
        });
        
        // Auto-resize textarea
        input.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = this.scrollHeight + 'px';
        });
        
        return card;
    }
    
    getPlaceholder(type) {
        const placeholders = {
            story: 'En tant que [utilisateur], je veux [action] pour [b√©n√©fice]...',
            rule: 'D√©crivez une r√®gle m√©tier ou contrainte...',
            example: 'D√©crivez un exemple concret : "Quand [situation], alors [r√©sultat]"...',
            question: 'Quelle question reste en suspens ?...'
        };
        return placeholders[type] || '';
    }
    
    getCardContent(id) {
        const card = this.cards.find(c => c.id === id);
        return card ? card.content : '';
    }
    
    updateCardContent(id, content) {
        const card = this.cards.find(c => c.id === id);
        if (card) {
            card.content = content;
            this.saveToStorage();
        }
    }
    
    deleteCard(id) {
        if (confirm('Supprimer cette carte ?')) {
            const element = document.getElementById(id);
            if (element) {
                element.remove();
            }
            
            this.cards = this.cards.filter(c => c.id !== id);
            this.reorganizeBoard();
            this.saveToStorage();
        }
    }
    
    duplicateCard(id) {
        const originalCard = this.cards.find(c => c.id === id);
        if (originalCard) {
            this.addCard(originalCard.type, originalCard.content + ' (copie)');
        }
    }
    
    reorganizeBoard() {
        // Nettoyer les colonnes vides
        const columns = document.querySelectorAll('.story-column');
        columns.forEach(column => {
            const hasStory = column.querySelector('[data-type="story"] .card');
            const hasRules = column.querySelector('[data-type="rule"] .card');
            const hasExamples = column.querySelector('[data-type="example"] .card');
            
            if (!hasStory && !hasRules && !hasExamples) {
                column.remove();
            }
        });
        
        // Assurer qu'il y a toujours au moins une colonne
        if (document.querySelectorAll('.story-column').length === 0) {
            this.createStoryColumn();
        }
    }
    
    clearAll() {
        if (confirm('Supprimer toutes les cartes ? Cette action est irr√©versible.')) {
            document.getElementById('main-board').innerHTML = '';
            document.getElementById('questions-container').innerHTML = '';
            this.cards = [];
            this.votes.clear();
            this.currentStoryPoints = null;
            this.storyColumns = [];
            this.updateVoteResult();
            this.initializeColumns();
            this.saveToStorage();
        }
    }
    
    vote(value) {
        // Simuler un ID utilisateur unique
        const userId = 'user-' + Math.random().toString(36).substr(2, 9);
        
        this.votes.set(userId, value);
        
        // Mettre √† jour l'interface
        document.querySelectorAll('.vote-btn').forEach(btn => {
            btn.classList.remove('selected');
        });
        
        document.querySelector(`[data-value="${value}"]`).classList.add('selected');
        
        this.updateVoteResult();
        this.saveToStorage();
    }
    
    updateVoteResult() {
        const voteArray = Array.from(this.votes.values());
        if (voteArray.length === 0) {
            document.getElementById('voteResult').textContent = '';
            return;
        }
        
        const numericVotes = voteArray.filter(v => v !== '?');
        if (numericVotes.length === 0) {
            document.getElementById('voteResult').textContent = 'Votes : ' + voteArray.join(', ');
            return;
        }
        
        const average = numericVotes.reduce((sum, val) => sum + parseInt(val), 0) / numericVotes.length;
        const consensus = this.findConsensus(voteArray);
        
        document.getElementById('voteResult').textContent = 
            `R√©sultat : ${consensus} (Moyenne: ${average.toFixed(1)})`;
        
        this.currentStoryPoints = consensus;
    }
    
    findConsensus(votes) {
        const numericVotes = votes.filter(v => v !== '?').map(v => parseInt(v));
        if (numericVotes.length === 0) return '?';
        
        const sorted = numericVotes.sort((a, b) => a - b);
        const median = sorted[Math.floor(sorted.length / 2)];
        
        const fibValues = [1, 2, 3, 5, 8, 13, 20];
        return fibValues.reduce((prev, curr) => 
            Math.abs(curr - median) < Math.abs(prev - median) ? curr : prev
        );
    }
    
    exportJSON() {
        const data = {
            version: '2.0',
            timestamp: new Date().toISOString(),
            cards: this.cards,
            votes: Object.fromEntries(this.votes),
            storyPoints: this.currentStoryPoints
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], {
            type: 'application/json'
        });
        
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `example-mapping-${new Date().toISOString().split('T')[0]}.json`;
        a.click();
        
        URL.revokeObjectURL(url);
    }
    
    importJSON(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const data = JSON.parse(e.target.result);
                
                // Vider le board actuel
                this.clearAll();
                
                // Charger les donn√©es
                if (data.cards) {
                    data.cards.forEach(card => {
                        this.addCard(card.type, card.content, card.id);
                    });
                }
                
                if (data.votes) {
                    this.votes = new Map(Object.entries(data.votes));
                    this.updateVoteResult();
                }
                
                if (data.storyPoints) {
                    this.currentStoryPoints = data.storyPoints;
                }
                
                alert('Import r√©ussi !');
                
            } catch (error) {
                alert('Erreur lors de l\'import : ' + error.message);
            }
        };
        
        reader.readAsText(file);
        event.target.value = '';
    }
    
    exportJIRA() {
        const storyCards = this.cards.filter(c => c.type === 'story');
        const ruleCards = this.cards.filter(c => c.type === 'rule');
        const exampleCards = this.cards.filter(c => c.type === 'example');
        const questionCards = this.cards.filter(c => c.type === 'question');
        
        let jiraContent = '';
        
        // En-t√™te
        jiraContent += '## üìí User Story\n';
        if (storyCards.length > 0) {
            jiraContent += storyCards[0].content + '\n\n';
        } else {
            jiraContent += 'As a [user], I want [capability] so that [benefit].\n\n';
        }
        
        // Description
        jiraContent += '## üóíÔ∏è Description\n';
        jiraContent += 'User story cr√©√©e via Example Mapping le ' + new Date().toLocaleDateString('fr-FR') + '\n\n';
        
        // Crit√®res d'acceptation bas√©s sur les r√®gles
        if (ruleCards.length > 0) {
            jiraContent += '## üü™ Acceptance Criteria\n';
            ruleCards.forEach((rule, index) => {
                jiraContent += `**Rule ${index + 1}:** ${rule.content}\n`;
                
                // Trouver les exemples li√©s
                const relatedExamples = exampleCards.slice(index * 2, (index + 1) * 2);
                relatedExamples.forEach(example => {
                    jiraContent += `- **Example:** ${example.content}\n`;
                });
                jiraContent += '\n';
            });
        }
        
        // Exemples suppl√©mentaires
        if (exampleCards.length > 0) {
            jiraContent += '## ü§ñ Test Scenarios\n';
            exampleCards.forEach((example, index) => {
                jiraContent += `**Scenario ${index + 1}:** ${example.content}\n`;
            });
            jiraContent += '\n';
        }
        
        // Questions ouvertes
        if (questionCards.length > 0) {
            jiraContent += '## üç• Open Questions\n';
            questionCards.forEach((question, index) => {
                jiraContent += `- [ ] ${question.content}\n`;
            });
            jiraContent += '\n';
        }
        
        // Story Points
        if (this.currentStoryPoints) {
            jiraContent += `## Story Points\n${this.currentStoryPoints}\n\n`;
        }
        
        // Definition of Done
        jiraContent += `## ‚úÖ Definition of Done\n`;
        jiraContent += `- [ ] Code developed and unit tested\n`;
        jiraContent += `- [ ] Code reviewed by peer\n`;
        jiraContent += `- [ ] All acceptance criteria met\n`;
        jiraContent += `- [ ] Integration tests passing\n`;
        jiraContent += `- [ ] Documentation updated\n`;
        jiraContent += `- [ ] QA testing completed\n`;
        jiraContent += `- [ ] Ready for production deployment\n`;
        
        // Cr√©er et t√©l√©charger le fichier
        const blob = new Blob([jiraContent], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `jira-export-${new Date().toISOString().split('T')[0]}.txt`;
        a.click();
        URL.revokeObjectURL(url);
        
        // Aussi copier dans le presse-papier
        navigator.clipboard.writeText(jiraContent).then(() => {
            alert('Export JIRA cr√©√© et copi√© dans le presse-papier !');
        }).catch(() => {
            alert('Export JIRA cr√©√© ! Le fichier a √©t√© t√©l√©charg√©.');
        });
    }
    
    loadExample(type) {
        if (this.cards.length > 0 && !confirm('Charger un exemple effacera les cartes actuelles. Continuer ?')) {
            return;
        }
        
        this.clearAll();
        
        const examples = {
            auth: {
                story: "En tant qu'utilisateur enregistr√©, je veux me connecter avec mon email et mon mot de passe pour acc√©der √† mon compte",
                rules: [
                    "L'utilisateur doit fournir un email et un mot de passe valides",
                    "Les informations d'identification doivent √™tre valid√©es contre la base de donn√©es",
                    "L'utilisateur doit √™tre redirig√© vers la page appropri√©e apr√®s connexion r√©ussie",
                    "Les tentatives de connexion √©chou√©es doivent √™tre limit√©es pour s√©curit√©"
                ],
                examples: [
                    "Marie saisit son email et mot de passe corrects ‚Üí elle acc√®de √† son tableau de bord",
                    "Jean saisit un email incorrect ‚Üí message d'erreur 'Email ou mot de passe incorrect'",
                    "Sarah saisit un mot de passe expir√© ‚Üí message 'Votre mot de passe a expir√©'",
                    "Paul fait 3 tentatives √©chou√©es ‚Üí son compte est temporairement bloqu√©",
                    "Utilisateur non enregistr√© tente de se connecter ‚Üí message 'Aucun compte trouv√©'"
                ],
                questions: [
                    "Combien de tentatives avant blocage temporaire ?",
                    "Quelle est la dur√©e du blocage ?",
                    "Faut-il int√©grer l'authentification √† deux facteurs ?"
                ]
            },
            cart: {
                story: "En tant que client, je veux ajouter des produits √† mon panier pour les acheter plus tard",
                rules: [
                    "Un produit peut √™tre ajout√© au panier seulement s'il est disponible en stock",
                    "La quantit√© demand√©e ne peut pas d√©passer le stock disponible",
                    "Le prix total du panier doit √™tre recalcul√© √† chaque modification",
                    "Le panier doit persister entre les sessions utilisateur"
                ],
                examples: [
                    "Client ajoute 2 chaussures en stock ‚Üí panier mis √† jour avec nouveau prix total",
                    "Client tente d'ajouter 10 articles mais stock = 5 ‚Üí message 'Stock insuffisant, maximum 5 disponibles'",
                    "Client ferme navigateur puis revient ‚Üí panier conserv√© avec ses articles",
                    "Prix d'un article change ‚Üí panier recalcul√© automatiquement",
                    "Article √©puis√© dans le panier ‚Üí notification et retrait automatique"
                ],
                questions: [
                    "Quelle est la dur√©e de conservation du panier ?",
                    "Que faire si le prix change drastiquement ?",
                    "Faut-il des notifications push pour articles en rupture ?"
                ]
            },
            search: {
                story: "En tant qu'utilisateur, je veux rechercher des produits par mot-cl√© pour trouver ce dont j'ai besoin",
                rules: [
                    "La recherche doit √™tre insensible √† la casse (majuscules/minuscules)",
                    "Les r√©sultats doivent √™tre tri√©s par pertinence d√©croissante",
                    "Les recherches vides ne doivent pas retourner tous les produits",
                    "Les r√©sultats doivent √™tre pagin√©s pour la performance"
                ],
                examples: [
                    "Utilisateur tape 'iPhone' ‚Üí affiche tous les mod√®les iPhone disponibles",
                    "Utilisateur tape 'IPHONE' ‚Üí m√™me r√©sultat qu'exemple pr√©c√©dent",
                    "Utilisateur tape '' (recherche vide) ‚Üí message 'Veuillez saisir un terme de recherche'",
                    "Recherche retourne 100 r√©sultats ‚Üí affichage par pages de 20 produits",
                    "Recherche 'smartphone rouge' ‚Üí produits contenant les deux mots en priorit√©"
                ],
                questions: [
                    "Faut-il sugg√©rer des corrections orthographiques ?",
                    "Doit-on conserver un historique des recherches utilisateur ?",
                    "La recherche vocale doit-elle √™tre int√©gr√©e ?"
                ]
            },
            payment: {
                story: "En tant que client, je veux payer ma commande de mani√®re s√©curis√©e pour finaliser mon achat",
                rules: [
                    "Le paiement doit √™tre s√©curis√© avec chiffrement SSL/TLS",
                    "Plusieurs m√©thodes de paiement doivent √™tre disponibles",
                    "Le montant doit correspondre exactement au total de la commande",
                    "Une confirmation doit √™tre envoy√©e apr√®s paiement r√©ussi"
                ],
                examples: [
                    "Client paie 99,99‚Ç¨ par carte bancaire ‚Üí paiement accept√© et confirmation envoy√©e",
                    "Paiement refus√© par la banque ‚Üí message 'Paiement refus√©, veuillez v√©rifier vos informations'",
                    "Client utilise PayPal ‚Üí redirection vers PayPal puis retour avec confirmation",
                    "Connexion interrompue pendant paiement ‚Üí statut 'en attente' et v√©rification automatique",
                    "Double-clic sur 'Payer' ‚Üí un seul paiement trait√© gr√¢ce √† protection anti-double"
                ],
                questions: [
                    "Quel est le temps maximum d'attente pour confirmation bancaire ?",
                    "Comment g√©rer les remboursements automatiques ?",
                    "Doit-on conserver les donn√©es de carte pour futurs achats ?"
                ]
            },
            registration: {
                story: "En tant que visiteur, je veux cr√©er un compte pour acc√©der aux fonctionnalit√©s membres",
                rules: [
                    "L'email doit √™tre unique dans le syst√®me et avoir un format valide",
                    "Le mot de passe doit respecter les crit√®res de s√©curit√© d√©finis",
                    "L'utilisateur doit confirmer son email avant activation compl√®te",
                    "Tous les champs obligatoires doivent √™tre remplis"
                ],
                examples: [
                    "Nouvel utilisateur avec email valide et mot de passe fort ‚Üí compte cr√©√© et email de confirmation envoy√©",
                    "Utilisateur tente d'utiliser email d√©j√† existant ‚Üí message 'Cet email est d√©j√† utilis√©'",
                    "Mot de passe trop faible ‚Üí message 'Le mot de passe doit contenir 8 caract√®res, 1 majuscule, 1 chiffre'",
                    "Email format invalide saisi ‚Üí message 'Format d'email invalide'",
                    "Utilisateur ne confirme pas email dans 24h ‚Üí compte suspendu temporairement"
                ],
                questions: [
                    "Quel est le d√©lai maximum pour confirmation email ?",
                    "Doit-on permettre l'inscription via r√©seaux sociaux ?",
                    "Validation en temps r√©el ou seulement √† la soumission ?"
                ]
            },
            health: {
                story: "En tant que patient, je veux consulter mon parcours de soins personnalis√© pour mieux comprendre et suivre mon traitement",
                rules: [
                    "Le parcours doit √™tre adapt√© √† la pathologie et au stade de traitement du patient",
                    "Les informations m√©dicales doivent √™tre valid√©es par l'√©quipe soignante",
                    "Les donn√©es personnelles de sant√© doivent √™tre s√©curis√©es selon RGPD Sant√©",
                    "Le patient doit pouvoir acc√©der 24h/24 √† son parcours via interface s√©curis√©e"
                ],
                examples: [
                    "Mme Dupont (diab√®te type 2) voit son parcours avec: contr√¥les glyc√©mie, RDV nutritionniste, examens trimestriels",
                    "M. Martin (post-chirurgie) acc√®de √† son planning: r√©√©ducation, pansements, consultations de suivi",
                    "Patient avec allergie m√©dicamenteuse ‚Üí alerte automatique visible dans le parcours",
                    "Adolescent de 16 ans ‚Üí parcours adapt√© avec langage simplifi√© et contenus p√©dagogiques",
                    "Urgence m√©dicale ‚Üí √©quipe soignante acc√®de imm√©diatement √† l'historique complet"
                ],
                questions: [
                    "Comment int√©grer les proches aidants dans le parcours ?",
                    "Faut-il des notifications push pour rappels de traitement ?",
                    "Quelle granularit√© pour l'historique m√©dical visible par le patient ?",
                    "Comment g√©rer les parcours pluridisciplinaires (plusieurs services) ?"
                ]
            },
            devops: {
                story: "En tant que d√©veloppeur, je veux d√©clencher un d√©ploiement automatis√© en production pour livrer rapidement et en s√©curit√©",
                rules: [
                    "Le d√©ploiement ne peut √™tre d√©clench√© que sur la branche main/master prot√©g√©e",
                    "Tous les tests automatis√©s (unit, integration, e2e) doivent passer avant d√©ploiement",
                    "Un rollback automatique doit s'activer si les healthchecks post-d√©ploiement √©chouent",
                    "Chaque d√©ploiement doit √™tre trac√© avec qui, quand, quoi pour audit"
                ],
                examples: [
                    "Dev fait un merge request sur main ‚Üí pipeline CI/CD d√©marre automatiquement",
                    "Tests d'int√©gration √©chouent ‚Üí d√©ploiement bloqu√© avec notification Slack √©quipe",
                    "D√©ploiement r√©ussi mais API r√©pond 500 ‚Üí rollback automatique vers version pr√©c√©dente",
                    "Feature flag activ√© ‚Üí nouvelle fonctionnalit√© visible pour 10% utilisateurs seulement",
                    "Hotfix critique ‚Üí d√©ploiement d'urgence avec validation express mais trac√© complet"
                ],
                questions: [
                    "Quel est le temps maximum acceptable pour un rollback ?",
                    "Comment g√©rer les migrations base de donn√©es dans le pipeline ?",
                    "Faut-il un m√©canisme d'approbation manuelle pour la production ?",
                    "Comment tester les d√©ploiements sur un environnement miroir de production ?"
                ]
            }
        };
        
        const example = examples[type];
        if (!example) return;
        
        // Charger l'exemple avec la nouvelle organisation
        setTimeout(() => {
            this.addCard('story', example.story);
            
            example.rules.forEach(rule => {
                this.addCard('rule', rule);
            });
            
            example.examples.forEach(ex => {
                this.addCard('example', ex);
            });
            
            example.questions.forEach(question => {
                this.addCard('question', question);
            });
        }, 100);
    }
    
    showHelp() {
        document.getElementById('helpModal').style.display = 'block';
    }
    
    closeModal() {
        document.getElementById('helpModal').style.display = 'none';
    }
    
    saveToStorage() {
        const data = {
            cards: this.cards,
            votes: Object.fromEntries(this.votes),
            storyPoints: this.currentStoryPoints,
            timestamp: Date.now()
        };
        
        try {
            localStorage.setItem('exampleMapping', JSON.stringify(data));
        } catch (e) {
            console.warn('Impossible de sauvegarder dans localStorage:', e);
        }
    }
    
    loadFromStorage() {
        try {
            const data = localStorage.getItem('exampleMapping');
            if (data) {
                const parsed = JSON.parse(data);
                
                if (parsed.cards && parsed.cards.length > 0) {
                    parsed.cards.forEach(card => {
                        this.addCard(card.type, card.content, card.id);
                    });
                }
                
                if (parsed.votes) {
                    this.votes = new Map(Object.entries(parsed.votes));
                    this.updateVoteResult();
                }
                
                if (parsed.storyPoints) {
                    this.currentStoryPoints = parsed.storyPoints;
                }
            }
        } catch (e) {
            console.warn('Impossible de charger depuis localStorage:', e);
        }
    }
}

// Initialisation globale
let exampleTool;

document.addEventListener('DOMContentLoaded', () => {
    exampleTool = new ExampleMappingTool();
    
    // Fermer modal en cliquant √† l'ext√©rieur
    window.addEventListener('click', (e) => {
        const modal = document.getElementById('helpModal');
        if (e.target === modal) {
            exampleTool.closeModal();
        }
    });
});

// Pr√©venir la fermeture accidentelle avec des donn√©es non sauvegard√©es
window.addEventListener('beforeunload', (e) => {
    if (exampleTool && exampleTool.cards.length > 0) {
        e.preventDefault();
        e.returnValue = '';
        return '';
    }
});