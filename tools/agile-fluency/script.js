const answers = {};

// Configuration des zones avec descriptions d√©taill√©es
const zones = {
    1: {
        name: "FOCUSING",
        description: "Votre √©quipe ma√Ætrise les bases de l'agilit√©",
        color: "#ff6b6b",
        benefits: "Transparence, travail d'√©quipe, valeur business",
        skills: ["Planification centr√©e utilisateur", "R√©trospectives r√©guli√®res", "Prise de d√©cision collaborative"],
        weaknessAdvice: {
            0: "Commencez par organiser une r√©trospective mensuelle simple : 'Qu'est-ce qui a bien march√© ? Qu'est-ce qui peut √™tre am√©lior√© ?'",
            1: "Introduisez des user stories : 'En tant que [utilisateur], je veux [fonctionnalit√©] pour [b√©n√©fice]'",
            2: "Cr√©ez un rituel de d√©cision collective pour les choix techniques importants"
        }
    },
    2: {
        name: "DELIVERING", 
        description: "Votre √©quipe peut livrer rapidement et de fa√ßon fiable",
        color: "#4ecdc4",
        benefits: "D√©ploiement √† la demande, qualit√© √©lev√©e, r√©duction des risques",
        skills: ["D√©ploiement sans stress", "Tests automatis√©s", "Int√©gration continue"],
        weaknessAdvice: {
            0: "Commencez par mettre en place des tests unitaires sur les fonctions critiques",
            1: "Configurez un pipeline CI/CD simple avec GitHub Actions ou GitLab CI",
            2: "Automatisez vos d√©ploiements avec des scripts ou des outils comme Ansible"
        }
    },
    3: {
        name: "OPTIMIZING",
        description: "Votre √©quipe s'adapte en permanence gr√¢ce aux donn√©es",
        color: "#45b7d1", 
        benefits: "Innovation continue, leadership march√©, adaptation rapide",
        skills: ["D√©cisions bas√©es sur les donn√©es", "Tests A/B", "Monitoring temps r√©el"],
        weaknessAdvice: {
            0: "Installez Google Analytics ou un outil de monitoring simple pour comprendre l'usage",
            1: "Mettez en place des feature flags pour tester des fonctionnalit√©s avec une partie des utilisateurs",
            2: "Cr√©ez des dashboards simples avec les m√©triques importantes (temps de r√©ponse, erreurs)"
        }
    },
    4: {
        name: "STRENGTHENING",
        description: "Votre √©quipe optimise toute l'organisation",
        color: "#667eea",
        benefits: "Influence strat√©gique, culture collaborative, transformation",
        skills: ["Influence strat√©gique", "Collaboration inter-√©quipes", "Formation et mentorat"],
        weaknessAdvice: {
            0: "Proposez des pr√©sentations techniques aux autres √©quipes pour partager vos connaissances",
            1: "Participez aux r√©unions produit pour donner votre vision technique",
            2: "Organisez des 'lunch & learn' pour former d'autres √©quipes sur vos bonnes pratiques"
        }
    }
};

function startDiagnostic() {
    document.getElementById('questions-container').style.display = 'block';
    document.getElementById('results').classList.remove('show');
    resetDiagnostic();
}

function resetDiagnostic() {
    Object.keys(answers).forEach(key => delete answers[key]);
    document.querySelectorAll('.option').forEach(option => {
        option.classList.remove('selected');
    });
    document.querySelectorAll('.question').forEach(question => {
        question.classList.remove('answered');
    });
    document.getElementById('results').classList.remove('show');
}

// Gestion des r√©ponses
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('option')) {
        const question = e.target.closest('.question');
        const zone = question.dataset.zone;
        const questionNum = question.dataset.question;
        const value = parseInt(e.target.dataset.value);
        
        // D√©s√©lectionner les autres options de cette question
        question.querySelectorAll('.option').forEach(opt => {
            opt.classList.remove('selected');
        });
        
        // S√©lectionner cette option
        e.target.classList.add('selected');
        question.classList.add('answered');
        
        // Sauvegarder la r√©ponse
        if (!answers[zone]) answers[zone] = {};
        answers[zone][questionNum] = value;
        
        // V√©rifier si toutes les questions sont r√©pondues
        checkCompletion();
    }
});

function checkCompletion() {
    const totalQuestions = document.querySelectorAll('.question').length;
    const answeredQuestions = Object.values(answers).reduce((total, zone) => {
        return total + Object.keys(zone).length;
    }, 0);
    
    if (answeredQuestions === totalQuestions) {
        setTimeout(showResults, 500);
    }
}

function showResults() {
    const results = calculateResults();
    displayDetailedReport(results);
}

function calculateResults() {
    const results = {};
    
    for (let zone = 1; zone <= 4; zone++) {
        if (answers[zone]) {
            const zoneAnswers = Object.values(answers[zone]);
            const total = zoneAnswers.reduce((sum, val) => sum + val, 0);
            const maxPossible = zoneAnswers.length * 3;
            const percentage = Math.round((total / maxPossible) * 100);
            
            results[zone] = {
                score: total,
                maxScore: maxPossible,
                percentage: percentage,
                level: getLevel(percentage),
                answers: answers[zone]
            };
        }
    }
    
    return results;
}

function getLevel(percentage) {
    if (percentage >= 80) return "Ma√Ætris√©";
    if (percentage >= 60) return "En progression";
    if (percentage >= 40) return "En d√©veloppement";
    return "D√©butant";
}

function getLevelClass(level) {
    switch(level) {
        case "Ma√Ætris√©": return "level-mastered";
        case "En progression": return "level-progressing";
        case "En d√©veloppement": return "level-developing";
        default: return "level-beginner";
    }
}

function displayDetailedReport(results) {
    const overallScore = Object.values(results).reduce((sum, result) => sum + result.percentage, 0) / Object.keys(results).length;
    const teamName = localStorage.getItem('teamName') || 'Votre √©quipe';
    
    let html = `
        <div class="team-info">
            <h3>üìä R√©sultats du diagnostic - ${teamName}</h3>
            <p><strong>Score global :</strong> ${Math.round(overallScore)}% - ${getLevel(overallScore)}</p>
            <p><strong>√âvaluation :</strong> ${getOverallAssessment(overallScore, results)}</p>
        </div>
    `;
    
    html += generateZonesSummary(results);
    html += generateDetailedAnalysis(results);
    html += generateStrengthsWeaknesses(results);
    html += generateActionPlan(results);
    html += generateNextSteps(results);
    
    html += `
        <div style="text-align: center; margin-top: 30px;">
            <button class="btn btn-secondary" onclick="exportDetailedReport()" style="margin-right: 10px;">
                üìÑ Exporter rapport d√©taill√©
            </button>
            <button class="btn btn-secondary" onclick="resetDiagnostic()">
                üîÑ Refaire le diagnostic
            </button>
        </div>
    `;
    
    document.getElementById('results-content').innerHTML = html;
    document.getElementById('results').classList.add('show');
}

function generateZonesSummary(results) {
    let html = `
        <div class="report-section">
            <div class="report-header">
                <span>üéØ</span>
                <span>R√©sum√© par zone</span>
            </div>
    `;
    
    for (let zone = 1; zone <= 4; zone++) {
        if (results[zone]) {
            const zoneInfo = zones[zone];
            const result = results[zone];
            
            html += `
                <div class="result-zone">
                    <h4>Zone ${zone}: ${zoneInfo.name}</h4>
                    <div class="maturity-level ${getLevelClass(result.level)}">
                        ${result.level} (${result.percentage}%)
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${result.percentage}%; background: ${zoneInfo.color};"></div>
                    </div>
                </div>
            `;
        }
    }
    
    html += '</div>';
    return html;
}

function generateDetailedAnalysis(results) {
    let html = `
        <div class="report-section">
            <div class="report-header">
                <span>üîç</span>
                <span>Analyse d√©taill√©e par zone</span>
            </div>
    `;
    
    for (let zone = 1; zone <= 4; zone++) {
        if (results[zone]) {
            const zoneInfo = zones[zone];
            const result = results[zone];
            
            html += `
                <div style="margin-bottom: 25px; padding: 20px; background: rgba(255,255,255,0.05); border-radius: 10px; border-left: 4px solid ${zoneInfo.color};">
                    <h4>Zone ${zone}: ${zoneInfo.name}</h4>
                    <p><strong>√âvaluation :</strong> ${getZoneAssessment(result, zoneInfo)}</p>
                    <p><strong>Impact business :</strong> ${zoneInfo.benefits}</p>
                    
                    <div style="margin-top: 15px;">
                        <strong>D√©tail des r√©ponses :</strong>
                        <ul style="margin-top: 10px; padding-left: 20px;">
            `;
            
            // Analyse des r√©ponses individuelles
            Object.entries(result.answers).forEach(([questionNum, score]) => {
                const questionTexts = getQuestionTexts(zone, questionNum);
                const scoreText = ['Jamais', 'Parfois', 'Souvent', 'Toujours'][score];
                html += `<li>${questionTexts.question} : <strong>${scoreText}</strong></li>`;
            });
            
            html += `
                        </ul>
                    </div>
                </div>
            `;
        }
    }
    
    html += '</div>';
    return html;
}

function generateStrengthsWeaknesses(results) {
    const strengths = [];
    const weaknesses = [];
    
    for (let zone = 1; zone <= 4; zone++) {
        if (results[zone]) {
            const zoneInfo = zones[zone];
            const result = results[zone];
            
            if (result.percentage >= 70) {
                strengths.push({
                    zone: zone,
                    name: zoneInfo.name,
                    percentage: result.percentage,
                    description: zoneInfo.description
                });
            } else if (result.percentage < 50) {
                weaknesses.push({
                    zone: zone,
                    name: zoneInfo.name,
                    percentage: result.percentage,
                    description: zoneInfo.description
                });
            }
        }
    }
    
    let html = `
        <div class="report-section">
            <div class="report-header">
                <span>‚öñÔ∏è</span>
                <span>Forces et axes d'am√©lioration</span>
            </div>
            
            <div class="strengths-weaknesses">
                <div class="strength-card">
                    <h4>üí™ Points forts</h4>
    `;
    
    if (strengths.length > 0) {
        strengths.forEach(strength => {
            html += `
                <div style="margin-bottom: 15px;">
                    <strong>Zone ${strength.zone}: ${strength.name}</strong> (${strength.percentage}%)
                    <br><em>${strength.description}</em>
                </div>
            `;
        });
    } else {
        html += '<p><em>Toutes les zones ont un potentiel d\'am√©lioration. C\'est une excellente opportunit√© de croissance !</em></p>';
    }
    
    html += `
                </div>
                
                <div class="weakness-card">
                    <h4>üéØ Axes d'am√©lioration</h4>
    `;
    
    if (weaknesses.length > 0) {
        weaknesses.forEach(weakness => {
            html += `
                <div style="margin-bottom: 15px;">
                    <strong>Zone ${weakness.zone}: ${weakness.name}</strong> (${weakness.percentage}%)
                    <br><em>Opportunit√© de d√©veloppement prioritaire</em>
                </div>
            `;
        });
    } else {
        html += '<p><em>Excellente progression ! Continuez √† maintenir et perfectionner vos acquis.</em></p>';
    }
    
    html += `
                </div>
            </div>
        </div>
    `;
    
    return html;
}

function generateActionPlan(results) {
    const actions = [];
    
    for (let zone = 1; zone <= 4; zone++) {
        if (results[zone] && results[zone].percentage < 70) {
            const zoneInfo = zones[zone];
            const result = results[zone];
            
            // Analyser les r√©ponses sp√©cifiques pour donner des conseils cibl√©s
            Object.entries(result.answers).forEach(([questionNum, score]) => {
                if (score < 2) { // Score faible
                    const advice = zoneInfo.weaknessAdvice[questionNum];
                    if (advice) {
                        actions.push({
                            zone: zone,
                            zoneName: zoneInfo.name,
                            action: advice,
                            priority: getPriority(zone, score),
                            timeframe: getTimeframe(zone, score)
                        });
                    }
                }
            });
        }
    }
    
    // Trier par priorit√©
    actions.sort((a, b) => {
        const priorityOrder = { 'Haute': 3, 'Moyenne': 2, 'Basse': 1 };
        return priorityOrder[b.priority] - priorityOrder[a.priority];
    });
    
    let html = `
        <div class="report-section">
            <div class="report-header">
                <span>üìã</span>
                <span>Plan d'action recommand√©</span>
            </div>
            
            <p><strong>Recommandations personnalis√©es :</strong></p>
            <div class="action-plan">
    `;
    
    if (actions.length > 0) {
        actions.slice(0, 6).forEach((action, index) => { // Limiter √† 6 actions
            const priorityClass = `priority-${action.priority.toLowerCase().replace('sse', 'se').replace('te', 'gh')}`;
            html += `
                <div class="action-item ${priorityClass}">
                    <div style="flex: 1;">
                        <strong>Zone ${action.zone} (${action.zoneName}) :</strong>
                        <p>${action.action}</p>
                        <small><strong>Priorit√© :</strong> ${action.priority} | <strong>D√©lai :</strong> ${action.timeframe}</small>
                    </div>
                </div>
            `;
        });
    } else {
        html += `
            <div class="action-item priority-low">
                <div>
                    <strong>üéâ Excellente performance !</strong>
                    <p>Votre √©quipe montre une bonne ma√Ætrise de l'agilit√©. Concentrez-vous sur le maintien de ces bonnes pratiques et le partage de votre exp√©rience avec d'autres √©quipes.</p>
                </div>
            </div>
        `;
    }
    
    html += '</div></div>';
    return html;
}

function generateNextSteps(results) {
    const overallScore = Object.values(results).reduce((sum, result) => sum + result.percentage, 0) / Object.keys(results).length;
    
    let html = `
        <div class="next-steps">
            <div class="report-header">
                <span>üöÄ</span>
                <span>Prochaines √©tapes</span>
            </div>
            
            ${getNextStepsAdvice(overallScore, results)}
            
            <div class="timeline">
                <h4>üìÖ Chronologie sugg√©r√©e :</h4>
    `;
    
    const timeline = getTimeline(results);
    timeline.forEach(item => {
        html += `
            <div class="timeline-item">
                <div class="timeline-badge">${item.period}</div>
                <div style="flex: 1;">
                    <strong>${item.title}</strong>
                    <p>${item.description}</p>
                </div>
            </div>
        `;
    });
    
    html += `
            </div>
            
            <div style="margin-top: 20px; padding: 15px; background: rgba(255,255,255,0.1); border-radius: 8px;">
                <strong>üí° Conseil final :</strong>
                <p>L'agilit√© est un voyage, pas une destination. C√©l√©brez vos progr√®s, apprenez de vos √©checs, et gardez toujours l'utilisateur au centre de vos pr√©occupations !</p>
            </div>
        </div>
    `;
    
    return html;
}

// Fonctions utilitaires pour l'analyse
function getOverallAssessment(score, results) {
    if (score >= 80) {
        return "Votre √©quipe d√©montre une excellente ma√Ætrise de l'agilit√©. Vous √™tes un mod√®le pour l'organisation !";
    } else if (score >= 60) {
        return "Votre √©quipe est sur la bonne voie avec de solides fondations agiles. Quelques am√©liorations cibl√©es vous permettront d'atteindre l'excellence.";
    } else if (score >= 40) {
        return "Votre √©quipe a commenc√© sa transformation agile. Il y a de bonnes bases √† consolider et plusieurs opportunit√©s d'am√©lioration.";
    } else {
        return "Votre √©quipe d√©bute son parcours agile. C'est le moment id√©al pour poser de solides fondations et progresser √©tape par √©tape.";
    }
}

function getZoneAssessment(result, zoneInfo) {
    if (result.percentage >= 80) {
        return `Excellente ma√Ætrise de cette zone ! Votre √©quipe excelle dans ${zoneInfo.name.toLowerCase()}.`;
    } else if (result.percentage >= 60) {
        return `Bonne progression dans cette zone. Quelques ajustements permettront d'optimiser ${zoneInfo.name.toLowerCase()}.`;
    } else if (result.percentage >= 40) {
        return `Zone en d√©veloppement. Des efforts cibl√©s sur ${zoneInfo.name.toLowerCase()} apporteront des b√©n√©fices significatifs.`;
    } else {
        return `Zone prioritaire d'am√©lioration. Investir dans ${zoneInfo.name.toLowerCase()} transformera l'efficacit√© de l'√©quipe.`;
    }
}

function getQuestionTexts(zone, questionNum) {
    const questions = {
        1: {
            1: { question: "Planification centr√©e utilisateur" },
            2: { question: "R√©trospectives r√©guli√®res" },
            3: { question: "Prise de d√©cision collaborative" }
        },
        2: {
            1: { question: "D√©ploiement √† la demande" },
            2: { question: "Tests automatis√©s" },
            3: { question: "Int√©gration continue" }
        },
        3: {
            1: { question: "D√©cisions bas√©es sur les donn√©es" },
            2: { question: "Tests A/B et exp√©rimentation" },
            3: { question: "Monitoring et alertes" }
        },
        4: {
            1: { question: "Influence strat√©gique" },
            2: { question: "Collaboration inter-√©quipes" },
            3: { question: "Formation et mentorat" }
        }
    };
    return questions[zone][questionNum];
}

function getPriority(zone, score) {
    if (zone <= 2 && score === 0) return "Haute";
    if (score === 0) return "Moyenne";
    return "Basse";
}

function getTimeframe(zone, score) {
    if (zone <= 2 && score === 0) return "1-2 mois";
    if (score === 0) return "2-3 mois";
    return "3-6 mois";
}

function getNextStepsAdvice(overallScore, results) {
    if (overallScore >= 80) {
        return `
            <p><strong>üéâ F√©licitations !</strong> Votre √©quipe a atteint un niveau d'excellence agile. Voici comment maintenir et amplifier ce succ√®s :</p>
            <ul>
                <li>Partagez vos bonnes pratiques avec d'autres √©quipes</li>
                <li>Participez √† des conf√©rences agiles pour inspirer la communaut√©</li>
                <li>Continuez √† innover et exp√©rimenter</li>
                <li>Mentorez d'autres √©quipes dans leur transformation</li>
            </ul>
        `;
    } else if (overallScore >= 60) {
        return `
            <p><strong>üëè Tr√®s bon travail !</strong> Votre √©quipe progresse bien. Voici les prochaines √©tapes pour atteindre l'excellence :</p>
            <ul>
                <li>Identifiez et corrigez les derniers points bloquants</li>
                <li>Automatisez davantage vos processus</li>
                <li>Renforcez la collaboration avec les autres √©quipes</li>
                <li>Mesurez et optimisez continuellement</li>
            </ul>
        `;
    } else {
        return `
            <p><strong>üöÄ En route vers l'agilit√© !</strong> Votre √©quipe a de bonnes bases. Voici comment acc√©l√©rer la transformation :</p>
            <ul>
                <li>Concentrez-vous d'abord sur les zones 1 et 2 (Foundation)</li>
                <li>Formez l'√©quipe aux pratiques agiles essentielles</li>
                <li>Commencez petit avec des victoires rapides</li>
                <li>Demandez l'accompagnement d'un coach agile si n√©cessaire</li>
            </ul>
        `;
    }
}

function getTimeline(results) {
    const timeline = [];
    
    // Analyser les besoins selon les r√©sultats
    const weakZones = [];
    for (let zone = 1; zone <= 4; zone++) {
        if (results[zone] && results[zone].percentage < 60) {
            weakZones.push(zone);
        }
    }
    
    if (weakZones.includes(1)) {
        timeline.push({
            period: "Mois 1",
            title: "Fondations agiles",
            description: "Mettre en place les r√©trospectives et am√©liorer la collaboration d'√©quipe"
        });
    }
    
    if (weakZones.includes(2)) {
        timeline.push({
            period: "Mois 2-3",
            title: "Qualit√© et automatisation",
            description: "Impl√©menter les tests automatis√©s et l'int√©gration continue"
        });
    }
    
    if (weakZones.includes(3)) {
        timeline.push({
            period: "Mois 4-6",
            title: "Donn√©es et exp√©rimentation",
            description: "Installer le monitoring et commencer les tests A/B"
        });
    }
    
    if (weakZones.includes(4)) {
        timeline.push({
            period: "Mois 6+",
            title: "Leadership et influence",
            description: "D√©velopper l'influence organisationnelle et le mentorat"
        });
    }
    
    if (timeline.length === 0) {
        timeline.push({
            period: "Continu",
            title: "Am√©lioration continue",
            description: "Maintenir l'excellence et partager les bonnes pratiques"
        });
    }
    
    return timeline;
}

function exportResults() {
    if (Object.keys(answers).length === 0) {
        alert('Veuillez d\'abord compl√©ter le diagnostic !');
        return;
    }
    
    const results = calculateResults();
    const exportData = {
        timestamp: new Date().toISOString(),
        answers: answers,
        results: results,
        teamName: prompt('Nom de l\'√©quipe (optionnel):') || '√âquipe anonyme'
    };
    
    localStorage.setItem('teamName', exportData.teamName);
    
    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `agile-fluency-${exportData.teamName.replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
}

function exportDetailedReport() {
    const results = calculateResults();
    const teamName = localStorage.getItem('teamName') || '√âquipe';
    const date = new Date().toLocaleDateString('fr-FR');
    
    // Cr√©er un rapport texte d√©taill√©
    let report = `RAPPORT D'√âVALUATION AGILE FLUENCY\n`;
    report += `=====================================\n\n`;
    report += `√âquipe: ${teamName}\n`;
    report += `Date: ${date}\n\n`;
    
    const overallScore = Object.values(results).reduce((sum, result) => sum + result.percentage, 0) / Object.keys(results).length;
    report += `SCORE GLOBAL: ${Math.round(overallScore)}% - ${getLevel(overallScore)}\n\n`;
    
    report += `D√âTAIL PAR ZONE:\n`;
    report += `================\n`;
    
    for (let zone = 1; zone <= 4; zone++) {
        if (results[zone]) {
            const zoneInfo = zones[zone];
            const result = results[zone];
            
            report += `\nZone ${zone}: ${zoneInfo.name}\n`;
            report += `Score: ${result.percentage}% (${result.level})\n`;
            report += `Description: ${zoneInfo.description}\n`;
            report += `B√©n√©fices: ${zoneInfo.benefits}\n`;
        }
    }
    
    const reportBlob = new Blob([report], {type: 'text/plain'});
    const link = document.createElement('a');
    link.href = URL.createObjectURL(reportBlob);
    link.download = `rapport-agile-fluency-${teamName.replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.txt`;
    link.click();
}

function importResults(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const importData = JSON.parse(e.target.result);
            
            // Restaurer les r√©ponses
            Object.assign(answers, importData.answers);
            
            // Sauvegarder le nom d'√©quipe
            localStorage.setItem('teamName', importData.teamName);
            
            // Mettre √† jour l'interface
            Object.keys(answers).forEach(zone => {
                Object.keys(answers[zone]).forEach(questionNum => {
                    const question = document.querySelector(`[data-zone="${zone}"][data-question="${questionNum}"]`);
                    const value = answers[zone][questionNum];
                    
                    question.querySelectorAll('.option').forEach(option => {
                        option.classList.remove('selected');
                        if (parseInt(option.dataset.value) === value) {
                            option.classList.add('selected');
                        }
                    });
                    question.classList.add('answered');
                });
            });
            
            showResults();
            alert(`R√©sultats import√©s pour l'√©quipe: ${importData.teamName}`);
            
        } catch (error) {
            alert('Erreur lors de l\'import du fichier. V√©rifiez que c\'est un fichier de diagnostic valide.');
        }
    };
    reader.readAsText(file);
}