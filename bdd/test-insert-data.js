// Script de test pour ins√©rer des donn√©es directement via l'API PocketBase
// Ex√©cuter avec: node bdd/test-insert-data.js

const PocketBase = require('pocketbase/cjs');
const pb = new PocketBase('http://localhost:8090');

async function insertTestData() {
    try {
        console.log('üîÑ Connexion √† PocketBase...');
        
        // 1. Cr√©er une matrice
        console.log('üìù Cr√©ation de la matrice...');
        const matrix = await pb.collection('tools_skills_matrix_matrices').create({
            name: 'Comp√©tences √âquipe Dev 2025',
            company: 'BastaVerse',
            description: 'Matrice de comp√©tences de l\'√©quipe de d√©veloppement',
            active: true
        });
        console.log('‚úÖ Matrice cr√©√©e:', matrix.id);

        // 2. Cr√©er des membres
        console.log('üìù Cr√©ation des membres...');
        const members = [];
        const memberNames = [
            { name: 'Alice Martin', role: 'D√©veloppeuse Senior' },
            { name: 'Bob Dupont', role: 'Tech Lead' },
            { name: 'Claire Bernard', role: 'D√©veloppeuse Full-Stack' }
        ];

        for (const memberData of memberNames) {
            const member = await pb.collection('tools_skills_matrix_members').create({
                matrix: matrix.id,
                name: memberData.name,
                role: memberData.role,
                active: true
            });
            members.push(member);
            console.log(`‚úÖ Membre cr√©√©: ${member.name}`);
        }

        // 3. Cr√©er des items
        console.log('üìù Cr√©ation des items...');
        const items = [];
        const itemNames = [
            { name: 'JavaScript', category: 'Frontend', type: 'skill' },
            { name: 'React', category: 'Frontend', type: 'skill' },
            { name: 'Node.js', category: 'Backend', type: 'skill' }
        ];

        for (const itemData of itemNames) {
            const item = await pb.collection('tools_skills_matrix_items').create({
                matrix: matrix.id,
                name: itemData.name,
                category: itemData.category,
                type: itemData.type,
                active: true
            });
            items.push(item);
            console.log(`‚úÖ Item cr√©√©: ${item.name}`);
        }

        // 4. Cr√©er des √©valuations
        console.log('üìù Cr√©ation des √©valuations...');
        for (const member of members) {
            for (const item of items) {
                await pb.collection('tools_skills_matrix_member_items').create({
                    matrix: matrix.id,
                    member: member.id,
                    item: item.id,
                    level: Math.floor(Math.random() * 5),
                    appetite: Math.floor(Math.random() * 5)
                });
            }
        }
        console.log(`‚úÖ ${members.length * items.length} √©valuations cr√©√©es`);

        console.log('\n‚úÖ Toutes les donn√©es ont √©t√© ins√©r√©es avec succ√®s !');
        
    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
        if (error.response) {
            console.error('D√©tails:', error.response);
        }
    }
}

insertTestData();
